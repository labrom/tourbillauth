// Mocks generated by Mockito 5.4.2 from annotations
// in tourbillauth/test/user_access_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tourbillauth/model.dart' as _i3;
import 'package:tourbillauth/user_access_view_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UserAccessViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAccessViewModel extends _i1.Mock
    implements _i2.UserAccessViewModel {
  MockUserAccessViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userCollectionName => (super.noSuchMethod(
        Invocation.getter(#userCollectionName),
        returnValue: '',
      ) as String);

  @override
  String get inviteCollectionName => (super.noSuchMethod(
        Invocation.getter(#inviteCollectionName),
        returnValue: '',
      ) as String);

  @override
  String get rolesFieldName => (super.noSuchMethod(
        Invocation.getter(#rolesFieldName),
        returnValue: '',
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addInvite(
    String? email, {
    String? resource,
    List<String>? roles = const [],
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addInvite,
          [email],
          {
            #resource: resource,
            #roles: roles,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addUser(
    String? userId, {
    required String? email,
    String? resource,
    List<String>? roles = const [],
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addUser,
          [userId],
          {
            #email: email,
            #resource: resource,
            #roles: roles,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.InviteRole> listInvites({String? resource}) => (super.noSuchMethod(
        Invocation.method(
          #listInvites,
          [],
          {#resource: resource},
        ),
        returnValue: <_i3.InviteRole>[],
      ) as List<_i3.InviteRole>);

  @override
  List<_i3.AppUserRole> listUsers({String? resource}) => (super.noSuchMethod(
        Invocation.method(
          #listUsers,
          [],
          {#resource: resource},
        ),
        returnValue: <_i3.AppUserRole>[],
      ) as List<_i3.AppUserRole>);

  @override
  List<_i3.UserRole> listUsersAndInvites({String? resource}) =>
      (super.noSuchMethod(
        Invocation.method(
          #listUsersAndInvites,
          [],
          {#resource: resource},
        ),
        returnValue: <_i3.UserRole>[],
      ) as List<_i3.UserRole>);

  @override
  void removeInvite(
    String? email, {
    String? resource,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeInvite,
          [email],
          {#resource: resource},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeUser(
    String? userId, {
    String? resource,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeUser,
          [userId],
          {#resource: resource},
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i3.AppUser> findUsers(String? query) => (super.noSuchMethod(
        Invocation.method(
          #findUsers,
          [query],
        ),
        returnValue: <_i3.AppUser>[],
      ) as List<_i3.AppUser>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
